# Generated from grammar/PascalParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,86,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        5,9,61,8,9,10,9,12,9,64,9,9,1,10,4,10,67,8,10,11,10,12,10,68,1,11,
        1,11,5,11,73,8,11,10,11,12,11,76,9,11,1,11,1,11,1,12,4,12,81,8,12,
        11,12,12,12,82,1,12,1,12,1,74,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,1,0,4,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,89,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,35,1,0,0,0,5,37,1,0,
        0,0,7,39,1,0,0,0,9,45,1,0,0,0,11,49,1,0,0,0,13,52,1,0,0,0,15,54,
        1,0,0,0,17,56,1,0,0,0,19,58,1,0,0,0,21,66,1,0,0,0,23,70,1,0,0,0,
        25,80,1,0,0,0,27,28,5,112,0,0,28,29,5,114,0,0,29,30,5,111,0,0,30,
        31,5,103,0,0,31,32,5,114,0,0,32,33,5,97,0,0,33,34,5,109,0,0,34,2,
        1,0,0,0,35,36,5,59,0,0,36,4,1,0,0,0,37,38,5,46,0,0,38,6,1,0,0,0,
        39,40,5,98,0,0,40,41,5,101,0,0,41,42,5,103,0,0,42,43,5,105,0,0,43,
        44,5,110,0,0,44,8,1,0,0,0,45,46,5,101,0,0,46,47,5,110,0,0,47,48,
        5,100,0,0,48,10,1,0,0,0,49,50,5,58,0,0,50,51,5,61,0,0,51,12,1,0,
        0,0,52,53,5,40,0,0,53,14,1,0,0,0,54,55,5,44,0,0,55,16,1,0,0,0,56,
        57,5,41,0,0,57,18,1,0,0,0,58,62,7,0,0,0,59,61,7,1,0,0,60,59,1,0,
        0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,20,1,0,0,0,64,62,
        1,0,0,0,65,67,7,2,0,0,66,65,1,0,0,0,67,68,1,0,0,0,68,66,1,0,0,0,
        68,69,1,0,0,0,69,22,1,0,0,0,70,74,5,39,0,0,71,73,9,0,0,0,72,71,1,
        0,0,0,73,76,1,0,0,0,74,75,1,0,0,0,74,72,1,0,0,0,75,77,1,0,0,0,76,
        74,1,0,0,0,77,78,5,39,0,0,78,24,1,0,0,0,79,81,7,3,0,0,80,79,1,0,
        0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,85,
        6,12,0,0,85,26,1,0,0,0,5,0,62,68,74,82,1,6,0,0
    ]

class PascalParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    ID = 10
    NUMBER = 11
    STRING = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "';'", "'.'", "'begin'", "'end'", "':='", "'('", 
            "','", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "ID", "NUMBER", "STRING", "WS" ]

    grammarFileName = "PascalParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


